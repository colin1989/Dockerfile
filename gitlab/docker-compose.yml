version: "3"

services:


  
  gitlab:
    # privileged: true
    restart: always
    image: gitlab/gitlab-ce:latest
    container_name: gitlab
    hostname: '192.168.110.200'         # 也可以使用IP地址
    cpus: 4
    environment:
      TZ: 'Asia/Shanghai'
      GITLAB_OMNIBUS_CONFIG: |
        gitlab_rails['time_zone'] = 'Asia/Shanghai'
        external_url 'http://192.168.110.200:7002'
        postgresql['enable'] = false
        gitlab_rails['gitlab_shell_ssh_port'] = 7003
        gitlab_rails['db_adapter'] = 'postgresql'
        gitlab_rails['db_host'] = 'postgres'
        gitlab_rails['db_database'] = 'gitlabhq_production'
        gitlab_rails['db_username'] = 'gitlab'
        gitlab_rails['db_password'] = 'password'
    ports:
      - '7001:443'
      - '7002:7002'      # 注意这里不是80  与上面external_url自定义端口保持一致
      - '7003:7003'      
      # https://blog.csdn.net/weixin_44055380/article/details/116932506
      # https://www.trickyedecay.me/2021/04/09/install-dockerize-gitlab-with-nginx-reverse-proxy/#_5-1-gitlab-%E5%AE%89%E8%A3%85
      # 现如今，我们在 docker-compose.yml 中设置的 ssh 端口并不会真正用于监听。
      # 我们需要潜入到容器内部对 /assets/sshd_config 文件进行修改。
      # chmod 700 ssh_host_ecdsa_key # 权限设置为只有拥有者能访问，其他组员和其他用户不能访问
      # chmod 700 ssh_host_ed25519_key
      # chmod 700 ssh_host_rsa_key
    volumes:             # 宿主机地址若没有，会自动创建目录
      - ${DATA_DIR}/gitlab/config:/etc/gitlab
      - ${Gitlab_LOG_DIR}:/var/log/gitlab
      - ${DATA_DIR}/gitlab/data:/var/opt/gitlab
    shm_size: '256m'
    networks:
      - default
      - dbnetwork
  
  postgres:
    image: postgres:latest
    networks:
      - default
      - dbnetwork
    environment:
      POSTGRES_DB: 'gitlabhq_production'
      POSTGRES_USER: 'gitlab'
      POSTGRES_PASSWORD: 'password'


volumes:
  gitlab-logs:
  gitlab-data:
 
networks:
  dbnetwork:
    external: true
  default:
    driver: bridge
    ipam:
      driver: default
      # 解除下面的注释可以设置网段，用于nginx等容器固定容器IP
      #config:
      #  - subnet: 10.0.0.0/24
